// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

/// @seed = "tsx prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:12345@localhost:5432/sepehr_archive"
}

/// Core domain models

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  passwordHash String
  firstName   String?
  lastName    String?
  email       String?  @unique
  role        Role
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Penalty settings
  dailyPenaltyAmount Float @default(0) // مبلغ جریمه روزانه
  penaltyGraceDays   Int   @default(0) // روزهای عفو جریمه

  createdProjects Project[] @relation("ProjectCreatedBy")
  createdFolders  Folder[]  @relation("FolderCreatedBy")
  createdDocuments Document[] @relation("DocumentCreatedBy")
  permissions     Permission[]
  folderPermissions FolderPermissions[]
  activities      ActivityLog[] @relation("UserActivities")
  
  // Financial relations
  units            Unit[]
  userInstallments UserInstallment[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)

  // Project palette
  colorPrimary       String  @default("#1976d2")
  colorFolderDefault String  @default("#90caf9")
  colorDocImage      String  @default("#26a69a")
  colorDocPdf        String  @default("#ef5350")
  bgColor            String  @default("#ffffff")

  createdBy   String
  createdByUser User @relation("ProjectCreatedBy", fields: [createdBy], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  folders     Folder[]
  documents   Document[]
  
  // Financial relations
  units               Unit[]
  installmentDefinitions InstallmentDefinition[]
  
  // Accounting relations
  accounts            Account[]
  accountGroups       AccountGroup[]
  accountClasses      AccountClass[]
  accountSubClasses   AccountSubClass[]
  accountDetails      AccountDetail[]
  transactions        Transaction[]
  invoices            Invoice[]
  bills               Bill[]
  ledgers             Ledger[]
  banks               Bank[]
  accountingDocuments AccountingDocument[]
}

model Folder {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  parentId    String?
  parent      Folder?  @relation("FolderToChildren", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderToChildren")

  name        String
  description String?
  tabKey      TabKey

  // Materialized path for fast tree queries (e.g., "/root/child/grandchild")
  path        String
  depth       Int

  sortOrder   Int       @default(0)

  createdBy   String
  createdByUser User    @relation("FolderCreatedBy", fields: [createdBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt

  documents   Document[]
  permissions FolderPermissions[]

  @@index([projectId, path])
}

model Document {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  folderId    String?  // Make folderId optional to support root level documents
  folder      Folder?  @relation(fields: [folderId], references: [id]) // Make folder relation optional

  name        String
  description String?
  tagsJson    String    @default("[]")
  mimeType    String
  fileExt     String
  sizeBytes   Int
  isUserUploaded Boolean @default(false)

  createdBy   String
  createdByUser User    @relation("DocumentCreatedBy", fields: [createdBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // For local storage, we store relative file path from storage root
  filePath    String

  // Future: multiple versions
  versions    DocumentVersion[]
  
  // Accounting relations
  transactions Transaction[]
  invoices     Invoice[]
  bills        Bill[]

  @@index([projectId, folderId])
  @@index([isUserUploaded])
}

model DocumentVersion {
  id          String   @id @default(cuid())
  documentId  String
  document    Document @relation(fields: [documentId], references: [id])
  version     Int
  filePath    String
  checksum    String
  createdAt   DateTime @default(now())

  @@unique([documentId, version])
}

model Permission {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  resourceType ResourceType
  resourceId   String
  tabKey       TabKey?
  accessLevel  AccessLevel
  expiresAt    DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, resourceType, resourceId])
  @@unique([userId, resourceType, resourceId])
}

model FolderPermissions {
  id        String   @id @default(cuid())
  folderId  String
  userId    String
  canView   Boolean  @default(false)
  canEdit   Boolean  @default(false)
  canDelete Boolean  @default(false)
  
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([folderId, userId])
}

model AppSettings {
  id            Int      @id @default(1)
  themePrimary  String   @default("#1976d2")
  themeSecondary String  @default("#9c27b0")
  themeBg       String   @default("#ffffff")
  storageRoot   String?
  maxUploadMb   Int      @default(100)
  backupLastPath String?
  locale        String   @default("fa")
  
  // Security Settings
  sessionTimeout        Int     @default(30)
  requirePasswordChange Int     @default(90)
  maxLoginAttempts      Int     @default(5)
  ipWhitelist          String?
  ipBlacklist          String?
  auditLogging         Boolean @default(true)
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserActivities", fields: [userId], references: [id])
  action      ActivityAction
  resourceType ResourceType
  resourceId  String
  resourceName String
  description String?
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
  @@index([resourceType, resourceId])
}

model LoginAttempt {
  id          String   @id @default(cuid())
  ipAddress   String
  username    String?
  success     Boolean
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([ipAddress, createdAt])
  @@index([username, createdAt])
}

// Enums
enum Role {
  ADMIN
  BUYER
  CONTRACTOR
  SUPPLIER
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
}

enum TabKey {
  BUYER
  CONTRACTOR
  SUPPLIER
}

enum ResourceType {
  PROJECT
  FOLDER
  DOCUMENT
}

enum AccessLevel {
  VIEW
  ADD
  ADMIN
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  DOWNLOAD
}

// Financial Models

model Unit {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  unitNumber  String
  area        Float    // متراژ
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userInstallments UserInstallment[]
  
  @@unique([projectId, unitNumber])
  @@index([userId])
}

model InstallmentDefinition {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  title       String   // عنوان قسط (مثلاً پروانه ساختمان)
  dueDate     DateTime? // تاریخ سررسید (اختیاری برای اقساط پیش فرض)
  amount      Float    // مبلغ کل قسط برای پروژه
  isDefault   Boolean  @default(true) // آیا این قسط پیش فرض است یا مخصوص کاربر
  order       Int      @default(0) // ترتیب نمایش قسط
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userInstallments UserInstallment[]
  
  @@index([projectId])
  @@index([projectId, order])
}

model UserInstallment {
  id                      String   @id @default(cuid())
  userId                  String
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  unitId                  String
  unit                    Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  installmentDefinitionId String?  // اختیاری - برای اقساط شخصی‌سازی شده null می‌شود
  installmentDefinition   InstallmentDefinition? @relation(fields: [installmentDefinitionId], references: [id], onDelete: SetNull)
  shareAmount             Float    // قدرالسهم کاربر از آن قسط
  status                  InstallmentStatus @default(PENDING)
  isCustomized            Boolean  @default(false) // آیا این قسط توسط کاربر شخصی‌سازی شده است
  title                   String?  // عنوان شخصی‌سازی شده قسط
  dueDate                 DateTime? // تاریخ سررسید شخصی‌سازی شده
  order                   Int      @default(0) // ترتیب نمایش قسط
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  payments    Payment[]
  penalties   Penalty[]
  receipts    Receipt[]
  
  @@index([userId])
  @@index([installmentDefinitionId])
}

model Payment {
  id                String   @id @default(cuid())
  userInstallmentId String
  userInstallment   UserInstallment @relation(fields: [userInstallmentId], references: [id], onDelete: Cascade)
  paymentDate       DateTime
  amount            Float
  description       String?
  receiptImagePath  String?  // مسیر تصویر فیش پرداخت
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userInstallmentId])
  @@index([paymentDate])
}

model Receipt {
  id                String   @id @default(cuid())
  userInstallmentId String
  userInstallment   UserInstallment @relation(fields: [userInstallmentId], references: [id], onDelete: Cascade)
  receiptNumber     String   // شماره فیش (auto-increment)
  amount            Float    @default(0) // مبلغ فیش
  receiptDate       DateTime? // تاریخ فیش
  description       String?  // توضیحات
  receiptImagePath  String?  // مسیر تصویر فیش
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userInstallmentId])
  @@index([receiptNumber])
}


model Penalty {
  id                String   @id @default(cuid())
  userInstallmentId String
  userInstallment   UserInstallment @relation(fields: [userInstallmentId], references: [id], onDelete: Cascade)
  daysLate          Int      // روزهای تأخیر
  dailyRate         Float    // نرخ جریمه روزانه
  totalPenalty      Float    // مبلغ کل جریمه
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userInstallmentId])
}

// Financial Enums
enum InstallmentStatus {
  PENDING    // در انتظار پرداخت
  PARTIAL    // بخشی پرداخت شده
  PAID       // پرداخت شده
  OVERDUE    // معوق
}

// Archived Models

model ArchivedUser {
  id                  String   @id @default(cuid())
  originalUserId      String
  username            String
  firstName           String?
  lastName            String?
  email               String?
  role                Role
  dailyPenaltyAmount  Float
  penaltyGraceDays    Int
  archivedAt          DateTime @default(now())

  archivedUnits       ArchivedUnit[]
  archivedUserInstallments ArchivedUserInstallment[]

  @@index([username])
  @@index([archivedAt])
}

model ArchivedUnit {
  id              String   @id @default(cuid())
  archivedUserId  String
  archivedUser    ArchivedUser @relation(fields: [archivedUserId], references: [id], onDelete: Cascade)
  projectId       String
  projectName     String
  unitNumber      String
  area            Float
  archivedAt      DateTime @default(now())

  archivedUserInstallments ArchivedUserInstallment[]

  @@index([archivedUserId])
  @@index([projectId])
}

model ArchivedUserInstallment {
  id                        String   @id @default(cuid())
  archivedUserId            String
  archivedUser              ArchivedUser @relation(fields: [archivedUserId], references: [id], onDelete: Cascade)
  archivedUnitId            String?
  archivedUnit              ArchivedUnit? @relation(fields: [archivedUnitId], references: [id], onDelete: Cascade)
  installmentDefinitionId   String?
  installmentTitle          String
  shareAmount               Float
  status                    InstallmentStatus
  archivedAt                DateTime @default(now())

  archivedPayments          ArchivedPayment[]
  archivedPenalties         ArchivedPenalty[]

  @@index([archivedUserId])
  @@index([archivedUnitId])
  @@index([installmentDefinitionId])
}

model ArchivedPayment {
  id                        String   @id @default(cuid())
  archivedUserInstallmentId String
  archivedUserInstallment   ArchivedUserInstallment @relation(fields: [archivedUserInstallmentId], references: [id], onDelete: Cascade)
  paymentDate               DateTime
  amount                    Float
  description               String?
  archivedAt                DateTime @default(now())

  @@index([archivedUserInstallmentId])
  @@index([paymentDate])
}

model ArchivedPenalty {
  id                        String   @id @default(cuid())
  archivedUserInstallmentId String
  archivedUserInstallment   ArchivedUserInstallment @relation(fields: [archivedUserInstallmentId], references: [id], onDelete: Cascade)
  daysLate                  Int
  dailyRate                 Float
  totalPenalty              Float
  archivedAt                DateTime @default(now())

  @@index([archivedUserInstallmentId])
}

// Accounting Models

model AccountGroup {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  code        String   // کد گروه (1 رقم: 1, 2, 3, ...)
  name        String   // نام گروه (مثل: دارایی‌های جاری)
  isDefault   Boolean  @default(false) // آیا گروه پیش‌فرض است
  isProtected Boolean  @default(false) // آیا قابل حذف است
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  classes     AccountClass[]
  
  @@unique([projectId, code])
  @@index([projectId])
  @@index([projectId, sortOrder])
}

model AccountClass {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  groupId     String
  group       AccountGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  code        String   // کد کل (2 رقم: 01, 02, 03, ...)
  name        String   // نام کل (مثل: صندوق)
  nature      AccountNature // ماهیت حساب
  isDefault   Boolean  @default(false)
  isProtected Boolean  @default(false)
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subClasses  AccountSubClass[]
  
  @@unique([projectId, groupId, code])
  @@index([projectId])
  @@index([groupId])
  @@index([projectId, groupId, sortOrder])
}

model AccountSubClass {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  classId     String
  class       AccountClass @relation(fields: [classId], references: [id], onDelete: Cascade)
  code        String   // کد معین (3 رقم: 001, 002, 003, ...)
  name        String   // نام معین (مثل: صندوق دفتر مرکزی)
  hasDetails  Boolean  @default(false) // آیا دارای تفصیلی است
  isDefault   Boolean  @default(false)
  isProtected Boolean  @default(false)
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  details     AccountDetail[]
  
  @@unique([projectId, classId, code])
  @@index([projectId])
  @@index([classId])
  @@index([projectId, classId, sortOrder])
}

model AccountDetail {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subClassId  String
  subClass    AccountSubClass @relation(fields: [subClassId], references: [id], onDelete: Cascade)
  code        String   // کد تفصیلی (3 رقم: 001, 002, 003, ...)
  name        String   // نام تفصیلی (مثل: صندوق پروژه A)
  description String?  // توضیحات اضافی
  isDefault   Boolean  @default(false)
  isProtected Boolean  @default(false)
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // ارتباط با حساب اصلی برای تراکنش‌ها
  accounts    Account[]
  
  @@unique([projectId, subClassId, code])
  @@index([projectId])
  @@index([subClassId])
  @@index([projectId, subClassId, sortOrder])
}

model Account {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  detailId    String?  // ارتباط با کد تفصیلی
  detail      AccountDetail? @relation(fields: [detailId], references: [id], onDelete: SetNull)
  name        String
  code        String   @default("") // کد کامل حساب (مثل 101001001)
  type        AccountType
  level       Int      @default(1) // سطح حساب (1-4)
  parentId    String?  // حساب والد برای ساختار سلسله‌مراتبی
  parent      Account? @relation("AccountHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Account[] @relation("AccountHierarchy")
  contact     String?  // اطلاعات تماس
  description String?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactions Transaction[]
  invoices     Invoice[]
  bills        Bill[]
  ledgers      Ledger[]
  
  @@index([projectId])
  @@index([projectId, type])
  @@index([projectId, code])
  @@index([parentId])
  @@index([detailId])
}

model Transaction {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  date        DateTime
  amount      Float
  type        TransactionType
  journalType JournalType
  description String?
  documentId  String?  // ارتباط با سند آرشیو
  document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([projectId, date])
  @@index([accountId])
  @@index([journalType])
}

model Invoice {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  date        DateTime
  totalAmount Float
  status      InvoiceStatus @default(UNPAID)
  description String?
  documentId  String?  // ارتباط با سند آرشیو
  document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([projectId, date])
  @@index([accountId])
  @@index([status])
}

model Bill {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  date        DateTime
  totalAmount Float
  status      InvoiceStatus @default(UNPAID)
  description String?
  documentId  String?  // ارتباط با سند آرشیو
  document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([projectId, date])
  @@index([accountId])
  @@index([status])
}

model Ledger {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  balance     Float    @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([projectId, accountId])
  @@index([projectId])
  @@index([accountId])
}

// Accounting Enums
enum AccountType {
  CUSTOMER    // مشتری
  CONTRACTOR  // پیمانکار
  SUPPLIER    // تأمین‌کننده
  EXPENSE     // هزینه
  INCOME      // درآمد
  ASSET       // دارایی
  LIABILITY   // بدهی
  EQUITY      // سرمایه
}

enum AccountNature {
  DEBIT           // بدهکار
  CREDIT          // بستانکار
  DEBIT_CREDIT    // بدهکار–بستانکار
}

enum TransactionType {
  DEBIT   // بدهکار
  CREDIT  // بستانکار
}

enum JournalType {
  DAYBOOK        // دفتر روزنامه
  GENERAL_LEDGER // دفتر کل
  SUBSIDIARY     // دفتر معین
}

enum InvoiceStatus {
  PAID     // پرداخت شده
  PARTIAL  // بخشی
  UNPAID   // معوق
}

enum DocumentStatus {
  TEMPORARY // موقت
  PERMANENT // دائم
}

// Bank Models
model Bank {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String   // نام بانک
  branch      String?  // شعبه
  accountNumber String // شماره حساب
  accountName   String // نام صاحب حساب
  balance     Float    @default(0) // موجودی
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactions BankTransaction[]
  
  @@index([projectId])
}

model BankTransaction {
  id          String   @id @default(cuid())
  bankId      String
  bank        Bank     @relation(fields: [bankId], references: [id], onDelete: Cascade)
  type        BankTransactionType
  amount      Float
  description String?
  reference   String?  // شماره مرجع
  date        DateTime
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([bankId])
  @@index([date])
}

enum BankTransactionType {
  DEPOSIT    // واریز
  WITHDRAWAL // برداشت
  TRANSFER   // انتقال
  RECONCILE  // تطبیق
}

// Archived Project Models

model ArchivedProject {
  id                  String   @id @default(cuid())
  originalProjectId   String
  name                String
  description         String?
  status              ProjectStatus
  colorPrimary        String
  colorFolderDefault  String
  colorDocImage       String
  colorDocPdf         String
  bgColor             String
  createdBy           String
  createdByUsername   String
  archivedAt          DateTime @default(now())

  folders             ArchivedFolder[]
  documents           ArchivedDocument[]
  units               ArchivedProjectUnit[]
  installmentDefinitions ArchivedProjectInstallmentDefinition[]

  @@index([originalProjectId])
  @@index([archivedAt])
}

model ArchivedFolder {
  id                  String   @id @default(cuid())
  archivedProjectId   String
  archivedProject     ArchivedProject @relation(fields: [archivedProjectId], references: [id], onDelete: Cascade)
  parentId            String?
  parent              ArchivedFolder? @relation("ArchivedFolderToChildren", fields: [parentId], references: [id])
  children            ArchivedFolder[] @relation("ArchivedFolderToChildren")
  name                String
  description         String?
  tabKey              TabKey
  path                String
  depth               Int
  sortOrder           Int       @default(0)
  createdBy           String
  createdByUsername   String
  archivedAt          DateTime @default(now())

  documents           ArchivedDocument[]

  @@index([archivedProjectId, path])
}

model ArchivedDocument {
  id                  String   @id @default(cuid())
  archivedProjectId   String
  archivedProject     ArchivedProject @relation(fields: [archivedProjectId], references: [id], onDelete: Cascade)
  archivedFolderId    String?
  archivedFolder      ArchivedFolder? @relation(fields: [archivedFolderId], references: [id], onDelete: Cascade)
  name                String
  description         String?
  tagsJson            String    @default("[]")
  mimeType            String
  fileExt             String
  sizeBytes           Int
  isUserUploaded      Boolean   @default(false)
  createdBy           String
  createdByUsername   String
  filePath            String
  archivedAt          DateTime @default(now())

  @@index([archivedProjectId, archivedFolderId])
}

model ArchivedProjectUnit {
  id                  String   @id @default(cuid())
  archivedProjectId   String
  archivedProject     ArchivedProject @relation(fields: [archivedProjectId], references: [id], onDelete: Cascade)
  userId              String
  userUsername        String
  userFirstName       String?
  userLastName        String?
  unitNumber          String
  area                Float
  archivedAt          DateTime @default(now())

  @@index([archivedProjectId])
  @@index([userId])
}

model ArchivedProjectInstallmentDefinition {
  id                  String   @id @default(cuid())
  archivedProjectId   String
  archivedProject     ArchivedProject @relation(fields: [archivedProjectId], references: [id], onDelete: Cascade)
  title               String
  dueDate             DateTime?
  amount              Float
  isDefault           Boolean  @default(true)
  order               Int      @default(0)
  archivedAt          DateTime @default(now())

  @@index([archivedProjectId])
  @@index([archivedProjectId, order])
}

// Accounting Document Models
model AccountingDocument {
  id              String   @id @default(cuid())
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  documentNumber  String
  documentDate    DateTime
  description     String?
  totalDebit      Float    @default(0)
  totalCredit     Float    @default(0)
  status          DocumentStatus @default(TEMPORARY)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  entries         AccountingEntry[]

  @@index([projectId])
  @@index([projectId, documentNumber])
  @@index([documentDate])
  @@index([status])
}

model AccountingEntry {
  id              String   @id @default(cuid())
  documentId      String
  document        AccountingDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  accountCode     String
  accountName     String
  description     String?
  debit           Float    @default(0)
  credit          Float    @default(0)
  accountNature   AccountNature?
  createdAt       DateTime @default(now())

  @@index([documentId])
  @@index([accountCode])
}